plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    id('maven-publish')
}

apply plugin: 'signing'

android {
    namespace 'com.engage.engageadssdk'
    compileSdk 34

    defaultConfig {
        minSdk 21
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core

    // Media3
    implementation("androidx.media3:media3-ui:1.3.1")
    implementation("androidx.media3:media3-exoplayer:1.3.1")
    implementation("androidx.media3:media3-exoplayer-ima:1.3.1")

    // Lifecycle
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.5.1")
    implementation("androidx.lifecycle:lifecycle-common-java8:2.5.1")

    // IMA SDK
    implementation("com.google.ads.interactivemedia.v3:interactivemedia:3.26.0")

    // Simple XML
    implementation("org.simpleframework:simple-xml:2.7.1")

    // OkHttp
    implementation("com.squareup.okhttp3:okhttp:4.10.0")
    implementation 'com.google.code.gson:gson:2.8.8'

}


afterEvaluate {
    android.libraryVariants.each { variant ->
        def variantName = variant.name
        publishing.publications.create(variant.name, MavenPublication) {
            groupId = 'com.engage.engageadssdk'
            artifactId = 'engage-ads-sdk'
            version = '1.0.20-alpha-' + variantName

            from(components[variantName])

            // Add the AAR artifact with a classifier to avoid conflicts
            variant.outputs.all { output ->
                if (output.outputFile.name.endsWith('.aar')) {
                    artifact(output.outputFile) {
                        classifier = variantName
                    }
                }
            }
        }
    }
}